#!/bin/zsh

setopt extended_glob
setopt local_options
autoload -Uz colors && colors


### HANDLERS

# entrypoint
handle() {
  export LS=-3
  export TARGET=$1
  STAGE=0

  [[ -n $TARGET ]] || return

  _read_proto_stem $1
  dbgvar proto

  handle=handle_$proto
  if is_function $handle; then
    $handle $stem
  else
    handle_na $TARGET
  fi
}

handle_http() {
  _read_url_params $1
  infovar url
  [[ -n $params ]] && infovar params

  while IFS='=' read -r _handler pattern; do
    patterns=("${(s.:.)pattern}")
    if [[ $url == ${~patterns[1]:-*} &&
          $params == ${~patterns[2]:-*} ]]; then
      handler=${_handler%(\||:)*}
      _method=${_handler#$handler}
      seperator=${_method:0:1}
      method=${_method:1}
      (( VERBOSE > 1 )) && infovar handler method
      is_function $handler || internal_err
      __read_args
      $handler "$url" "$params" |
        __submit_pp "$method"
      [[ $seperator == : ]] && return
    fi
  done <<< $HTTP_HANDLERS

  internal_err
}

handle_https() {
  handle_http $@
}

handle_ssh() {
  _read_userhost_subpath $1
  infovar userhost subpath

  while IFS='=' read -r _handler pattern; do
    patterns=("${(s.:.)pattern}")
    if [[ $userhost == ${~patterns[1]:-*} &&
          $subpath == ${~patterns[2]:-*} ]]; then
      handler=${_handler%(\||:)*}
      _method=${_handler#$handler}
      seperator=${_method:0:1}
      method=${_method:1}
      (( VERBOSE > 1 )) && infovar handler method
      is_function $handler || internal_err
      __read_args
      $handler "$userhost" "$subpath" |
        __submit_pp "$method"
      [[ $seperator == : ]] && return
    fi
  done <<< $SSH_HANDLERS

  internal_err
}

handle_sftp() {
  handle_ssh $@
}

handle_file() {
  _read_target_type_mime_encoding $1
  infovar target type mime encoding
	
  while IFS='=' read -r _handler pattern; do
	  patterns=("${(s.:.)pattern}")
    if [[ $target == ${~patterns[1]:-*} &&
          $type == ${~patterns[2]:-*} &&
          $mime == ${~patterns[3]:-*} &&
          $encoding == ${~patterns[4]:-*} ]]; then
      handler=${_handler%(\||:)*}
      _method=${_handler#$handler}
      seperator=${_method:0:1}
      method=${_method:1}
      (( VERBOSE > 1 )) && infovar handler method
      is_function $handler || internal_err
      __read_args
      $handler "$target" "$type" "$mime" "$encoding" |
        __submit_pp "$method"
      [[ $seperator == : ]] && return
    fi
	done <<< $FILE_HANDLERS

  internal_err
}

handle_na() {
  _read_target $1

  if [[ -e $target ]]; then
    handle_file $target
    return
  # require username
  elif [[ $target =~ '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.-]+:.+$' ]]; then
    handle_ssh $target
    return
  else
    while IFS='=' read -r _handler pattern; do
      if [[ $target == $~pattern ]]; then
        handler=${_handler%(\||:)*}
        _method=${_handler#$handler}
        seperator=${_method:0:1}
        method=${_method:1}
        (( VERBOSE > 1 )) && infovar handler method
        is_function $handler || internal_err
        __read_args
        $handler "$target" |
          __submit_pp "$method"
      [[ $seperator == : ]] && return
      fi
    done <<< $NA_HANDLERS
  fi
  
  internal_err
}

# empty proto_handler for user to use if they want to force some handler methods
handle_misc() {
  _read_target $1
  infovar target

  while IFS='=' read -r _handler pattern; do
    if [[ $target == $~pattern ]]; then
      [[ $_handler != na.default ]] && LS=-3
      handler=${_handler%(\||:)*}
      _method=${_handler#$handler}
      seperator=${_method:0:1}
      method=${_method:1}
      (( VERBOSE > 1 )) && infovar handler method
      is_function $handler || internal_err
      __read_args
      $handler "$target" |
        __submit_pp "$method"
      [[ $seperator == : ]] && return
    fi
  done <<< $MISC_HANDLERS
  
  internal_err
}

### PRETRANSFORMS

__read_proto_stem() {
  proto=${1%%://*}
  stem=${1#*://}
  if [[ -n $ZSHDL_FORCE_PROTO ]]; then
    proto=$ZSHDL_FORCE_PROTO
  elif [[ $proto == $stem ]]; then
    proto=
  fi

  dbgvar proto
  dbgvar stem
}

__read_url_params() {
  url=$1
  if [[ $url == *"?"* ]]; then
    params=${url#*"?"}
    url=${url%%"?"*}
  fi
}

__read_userhost_subpath() {
  subpath=${1#*:}
  userhost=${1%%:*}
}

__read_target_type_mime_encoding() {
  target=$1

  if [[ ! -e $target && ! -L $target ]]; then
     internal_err "Nonexistant" $target
     return 1
  fi

	type=$(get_file_type $target)
  res="$(file -b --mime $target)"
	mime=${res%%\; *}
	encoding=${res#*\; }
}

__read_target() {
  target=$1
}

# For overriding
_read_url_params() { _${funcstack[1]} $@; }
_read_proto_stem() { _${funcstack[1]} $@; }
_read_userhost_subpath()  { _${funcstack[1]} $@; }
_read_target_type_mime_encoding() { _${funcstack[1]} $@; }
_read_target() { _${funcstack[1]} $@; }

__read_args() {
  { [[ -z $ARGS_ALL ]] } && return 1
  local _args splitat
  _args=(${(@Q)${(z)ARGS_ALL}})


  repeat $STAGE; do
    splitat=${_args[(ie):]}
    ((splitat)) || return 1
    _args=(${_args:$((splitat))})
  done
  splitat=${_args[(ie):]}
  ((splitat)) && ARGS=(${_args::$((splitat-1))}) || ARGS=($_args)
  [[ -n $ARGS ]] && info ARGS
}


#### API

# Note on naming: "API" functions available for use in config code are named normally, functions which are lower level or for overriding are prefixed with a _, __functions are internal, 

## Handler Defaults
http.default() {
  : args: url query
  : output: successfully created files, one per line
  :
  target=$1
  read_dest http $target || return 0
  [[ $target != http(|s)://* ]] && target="https://$target"
  [[ -n $2 ]] && target+="?$2"
  shift 1
  
  case $dest in
    *)
      opts=()
      if [[ -e $dest ]] && curl -I $target | grep -qi accept-ranges; then
        opts+=(-C - -O) # continue at end, original filename
      else
        opts+=(-o $dest)
      fi
      
      success_or_log curl -fL $opts $target || return
      ;;
  esac
  
  echo $dest
}

ssh.default() {
  : args: user@host subpath
  : output: successfully created files, one per line
  :
  read_dest ssh $2  || return 0
  [[ -d $dest ]] && dest=$dest:t
  success_or_log rsync -e "ssh -o ConnectTimeout=$ZSHDL_CONNECT_TIMEOUT" -avucz --partial $1:${(@qq)2} $dest || return # -u does an update in case we decided to keep the target, :t is due to rsync always copies into directories
  [[ -e $dest ]] && echo $dest
}

file.default() {
  : args: target type mime encoding
  : output: successfully created files, one per line
  :
  echo $1
}

na.default() {
  [[ -z $1 ]] && return 1
  ((VERBOSE > 1)) && warn Unhandled "\"$1\""
  _log_skipped
  return 1
}

http.na() {
  :
}

ssh.na() {
  :
}

file.na() {
  :
}

na.na() {
  :
}

## Getters

read_dest() {
  : args: proto '<a path-like string>' '[...lt_args]'
  : output: 'stores <a valid destination for $2> into the variable dest, otherwise returns 1 and outputs "# " (logs the task as skipped)'
  : notes: 'Prompts the user in case of conflict. Ex.' 'read_dest file $1:r.md -a && echo $dest || return 0'
  :
  proto=$1
  shift 1
  case $proto in
    http(|s))
      _dest=${${1%/\#[^\#/]##}:t} # strip #id
      [[ -z $_dest:e ]] && _dest+=.html
      ;;
    ssh)
      subpath=${1%.git}
      _dest=$subpath:t
      ;;
    (|s)ftp)
      _dest=$1:t
      ;;
    file)
      _dest=$1:t
      ;;
    *)
      false
    ;;
  esac
  dest="$(lt -d ${@:2} $ZSHDL_OUTPUT_DIR$_dest)" || {
    echo "# $_dest"
    return 1
  }
}

get_html_field() {
  sed -n 's:.*<$field>\(.*\)</$field>.*:\1:p' $1 | tr -cd '[a-zA-Z0-9 -_[]()]'
}

get_file_type() {
  # provides a char from fdsbcxesp for file, directory, symlink, block-device, char-device, executable, empty, socket, pipe
  if [[ -L $1 ]]; then
    echo "l"
  elif [[ -d $1 ]]; then
    echo "d"
  elif [[ -b $1 ]]; then
    echo "b"
  elif [[ -c $1 ]]; then
    echo "c"
  elif [[ -S $1 ]]; then
    echo "s"
  elif [[ -p $1 ]]; then
    echo "p"
  elif [[ -f $1 ]]; then
    if [[ ! -s $1 ]]; then
      echo "e"
    elif [[ -x $1 ]]; then
      echo "x"
    else
      echo "f"
    fi
  else
    echo "u"
  fi
}

get_real() {
  proto=$1
  shift 1
  case $proto in
    http(|s))
      curl --silent --output /dev/null --location --write-out '%{url_effective}' $1
      ;;
    file)
      echo $1:P
      ;;
    *)
      echo $1
    ;;
  esac
}

## Utils
internal_err() {
  print -u2 "${fg_bold[red]}[InternalError]${reset_color} ${(j. .)@}"
  return 1
}

fatal_err() {
  print -u2 "${fg_bold[red]}[FatalError]${reset_color} ${(j. .)@}"
  exit 1
}

err() {
  print -u2 -- "${fg[red]}[ERROR: $1]${reset_color} $2"
  [[ -n $TARGET ]] && _log_msg "[ERROR: $1] $2"
  return 1
}

warn() {
  ((VERBOSE)) || return
  print -u2 -- "${fg[yellow]}[WARN: $1]${reset_color} $2"
}

info() {
  ((VERBOSE)) || return
  print -u2 -- "${fg[blue]}[INFO: $1]${reset_color} $2"
  [[ -n $TARGET ]] && _log_msg "[INFO: $1] $2"
}

dbg() {
  ((VERBOSE > 1)) && print -u2 -- "${fg[blue]}[DEBUG]${reset_color} $1"
}

infovar() {
  ((VERBOSE)) || return
  while (($#)); do
    print -u2 -- "${fg[blue]}[INFO: $1]${reset_color} ${(P)1}"
    [[ -n $TARGET ]] && ((VERBOSE>1)) && _log_msg "[INFO: $1] ${(P)1}"
    shift 1
  done
}

dbgvar() {
  ((VERBOSE > 1)) || return
  while (($#)); do
    print -u2 -- "${fg[blue]}[INFO: $1]${reset_color} ${(P)1}"
    shift 1
  done
}

is_function() {
  (($# == 1)) || return 1
  [[ -n ${functions[$1]} ]]
}

success_or_log() {
  : args: command_to_run args_to_cmd
  : runs input as a command silencing stdout, and logs stdin+stdout if failed
  : use "success_or_log ..cmd || return" to log failures on critical steps
  :
  result="$($@ 2> >(tee /dev/fd/2))"
  code=$?
  if ((code)); then
    LS=$code TAG=${TAG:-$1} _log_msg $result
    return $code
  fi
}

failure_or_show() {
  : args: command_to_run args_to_cmd
  : outputs stdin on sucess, logs stderr on failure
  : use "failure_or_show" on the final step if it is failable
  :
  err_tf="$(mktemp)"
  trap 'rm $err_tf' EXIT
  output="$($@ 2> >(tee $err_tf >&2))"
  code=$?
  [[ -n $err_msg ]] || return
  if ((code)); then
    err_msg="$(< $err_tf)"
    LS=$code _log_msg "[ERROR: $*] $err_msg"
    return 1
  else
    echo $output
    return
  fi

}


log_stderr() {
  : args: command_to_run args_to_cmd
  : outputs: same as command, but duplicates stderr to logging
  :
  err_tf="$(mktemp)"
  dbgvar err_tf
  trap 'rm $err_tf' EXIT
  $@ 2> >(tee $err_tf >&2)
  code=$?
  err_msg="$(< $err_tf)"
  [[ -n $err_msg ]] || return
  if ((code > 0)); then
    LS=$code _log_msg "[ERROR: $*] $err_msg"
  else
    LS=$code _log_msg "[INFO: $*] $err_msg"
  fi
}

## Log rendering utils

# Strips ANSI codes to get the real string length
__get_visible_length() {
  local str_no_ansi
  str_no_ansi=${(S)1//(#m)\x1b\[[0-9;]*m/}
  print -n ${#str_no_ansi}
}

__center_text() {
  local text=$1
  local width=$2
  local len
  len=$(__get_visible_length $text)
  local pad_len=$(( (width - len) / 2 ))
  local remainder=$(( (width - len) % 2 ))
  printf "%*s%s%*s" $((pad_len+ remainder)) "" $text $pad_len ""
}

__truncate_right() {
  local text=$1
  local width=$2
  if (( $(__get_visible_length $text) > width )); then
    print -n -- "${text:0:$((width-1))}…"
  else
    printf "%-*s" $width $text
  fi
}

# note: special chars like ｜ can mess up the alignment
__truncate_left() {
  local text=$1
  local width=$2
  if (( $#text > width )); then
    print -n -- "…${text:$(( $#text - width + 1 ))}"
  else
    printf "%*s" $width $text
  fi
}


_get_LS_color() {
  case $1 in
    -2) print -n '\033[90m' ;;      # Muted Grey (for Skipped)
    -1) print -n  "${fg[blue]}" ;;      # Blue (for partial success)
    0) print -n "${fg[green]}" ;;      # Green (for total success)
    -*) print -n "${fg[white]}" ;;      # White (for misc)
    2) print -n '\033[38;5;203m' ;; # Salmon
    *) print -n "${fg[red]}" ;;    # Bright Red (for Errors)
  esac
}

__parse_log_args() {
  typeset -ga LOG_ARGS
  status_filters=()
  for param; do
    case $param in
      .(-|)[0-9]##)
        status_filters+=${1#.}
        ;;
      [0-9]#(:|))
        LOG_ARGS+=($param)
        ;;
      *)
        warn InvalidArg "$param is invalid, skipping."
        ;;
    esac
  done
  (($#status_filters)) && LOG_FILTER="WHERE LS IN (${(j. .)status_filters})"
}

__delete_log_entries() {
  if [[ ! -f $ZSHDL_DB ]]; then
    internal_err delete_log_entries "Database not found: $ZSHDL_DB"
    return 1
  fi

  if [[ $# -eq 0 ]]; then
    warn delete_log_entries "No log IDs provided."
    return 0
  fi

  local query=""

  if [[ "$1" =~ ^([0-9]+):$ ]]; then
    # Delete last N entries by ID
    query="DELETE FROM \"$ZSHDL_VARIANT\" WHERE id IN (
              SELECT id FROM \"$ZSHDL_VARIANT\" $LOG_FILTER
              ORDER BY id DESC LIMIT ${1%:}
           );"

  elif [[ "$1" == ":" ]]; then
    # Delete all entries
    query="DELETE FROM \"$ZSHDL_VARIANT\" $LOG_FILTER;"

  else
    # Delete specific IDs
    ids_list="${${(j.,.)@}%,}"
    query="DELETE FROM \"$ZSHDL_VARIANT\" WHERE id IN ($ids_list);"
  fi

  sqlite3 "$ZSHDL_DB" "$query"
}


# todo: combine dest + message maybe
__show_log_entries() {
  if [[ ! -f $ZSHDL_DB ]]; then
    internal_err show_log_entries "Database not found: $ZSHDL_DB"
    return 1
  fi

  if [[ $# -eq 0 ]]; then
    warn show_log_entries "No log IDs provided."
    return 0
  fi

  local first_entry=true

  local log_id log_ls log_target log_msg log_dir log_time

  base_select="SELECT id,
    strftime('%m-%d %H:%M:%S', time, 'localtime'),
    target, COALESCE(msg, ' '),
    COALESCE(dest, ' '),
    COALESCE(directory, ' '),
    LS
    FROM \"$ZSHDL_VARIANT\"
    $LOG_FILTER"
  query=""

  if [[ "$1" =~ ^([0-9]+):$ ]]; then
    query="SELECT * FROM ($base_select WHERE id >= ${1%:} ORDER BY id ASC) sub ORDER BY sub.id ASC;"
    # query="SELECT * FROM ($base_select ORDER BY id DESC LIMIT ${1%:}) sub ORDER BY sub.id ASC;"

  elif [[ "$1" == ":" ]]; then
    query="$base_select ORDER BY id ASC;"

  else
    ids_list="${${(j.,.)@}%,}"
    query="$base_select WHERE id IN ($ids_list);"
  fi
  
  first_entry=true
  stty -icanon -ixon
  sqlite3 -separator $'\t' "$ZSHDL_DB" "$query" |
  while IFS=$'\t' read -r log_id log_time log_target log_msg log_dest log_dir log_ls; do
    $first_entry && print && first_entry=false
    local header_pre="Task $log_id:   status code "
    local header_text="$header_pre$(_get_LS_color $log_ls)$log_ls${reset_color}"
    local header_text_nocolor="$header_pre$log_ls"
    local width=${#header_text_nocolor}

    local line=""
    for (( i=0; i < width; i++ )); do line+="─"; done

    print "  ┌─${line}─┐"
    printf "  │ %s │\n" "$header_text"
    print "  └─${line}─┘"

    print "  Target: $log_target"

    if [[ -n "$log_dir" ]]; then
      print "    Path: $log_dir"
    fi

    if [[ -n "$log_time" ]]; then
      print "    Time: $log_time"
    fi

    print
    
    if [[ -n "${log_dest# }" ]]; then
        print "  Destination:"
        print -r -- "${log_dest}" | sed -e 's/^/    /'
    elif [[ -n "${log_msg# }" ]]; then
        print "  Message:"
        print -r -- "${log_msg}" | sed 's/^/    /'
    fi

  done
}

# todo: 
__show_log() {
  if [[ ! -f $ZSHDL_DB ]]; then
    internal_err show_log "Database not found: $ZSHDL_DB"
    return 1
  fi

  local data
  data="$(sqlite3 "$ZSHDL_DB" -separator $'\t' \
    "SELECT id,
            strftime('%m-%d %H:%M:%S', time, 'localtime'),
            COALESCE(input, target),
            COALESCE(msg, ' '),
            COALESCE(dest, ' '),
            LS
     FROM \"$ZSHDL_VARIANT\"
     $LOG_FILTER
     ORDER BY id DESC
     LIMIT $ZSHDL_LOG_DISPLAY_LIMIT")" 2>/dev/null

  if [[ -z $data ]]; then
    warn show_log "No log entries found"
    return 0
  fi

  data=${data//$'\t'http(|s):\/\/(www.|)/$'\t'} # todo
  data=${data//$'\t'$HOME/$'\t'\~}

  local headers=$'ID\tTime\tTarget\tMessage\tDestination\tSt'
  local all_data=${headers}$'\n'${data}

  local -a col_widths
  col_widths=($(awk -F'\t' '
  {
    for(i=1; i<=NF; i++) {
      gsub(/\x1b\[[0-9;]*m/, "", $i)
      len = length($i)
      if (len > max[i]) max[i] = len
    }
  }
  END {
    w1 = max[1]; printf "%d ", w1;                                    # ID (exact width)
    w2 = 14; printf "%d ", w2;                      # Time
    w3 = (max[3]<10)?10:max[3]; w3 = (w3>40)?40:w3; printf "%d ", w3; # Target
    w4 = (max[4]<7)?7:max[4]; w4 = (w4>40)?40:w4; printf "%d ", w4; # Message
    w5 = (max[5]<20)?20:max[5]; w5 = (w5>30)?30:w5; printf "%d ", w5; # Destination
    w6 = 2; printf "%d ", w6;                        
  }' <<< "$all_data"))

  # Build and Print Table
  local top_border=┌
  local sep_border=├
  local bot_border=└


  for (( i=1; i <= ${#col_widths}; i++ )); do
    local w="${col_widths[i]}"
    local line="$(repeat $((w + 2)); do printf "%s" '─'; done)"

    top_border+="$line"
    sep_border+="$line"
    bot_border+="$line"

    if (( i < ${#col_widths} )); then
      top_border+="┬"
      sep_border+="┼"
      bot_border+="┴"
    else
      top_border+="┐"
      sep_border+="┤"
      bot_border+="┘"
    fi
  done

  print "Displaying logs for the $ZSHDL_VARIANT config:"
  print "$top_border"
  printf "│ %s │ %s │ %s │ %s │ %s │ %s │\n" \
    "$(__center_text 'ID' "${col_widths[1]}")" \
    "$(__center_text 'Time' "${col_widths[2]}")" \
    "$(__center_text 'Target' "${col_widths[3]}")" \
    "$(__center_text 'Message' "${col_widths[4]}")" \
    "$(__center_text 'Destination' "${col_widths[5]}")" \
    "$(__center_text 'St' "${col_widths[6]}")"
  print "$sep_border"

  while IFS=$'\t' read -r id time target msg dest ls; do
    local color="$(_get_LS_color "$ls")"
    local id_str="$(__center_text "$id" "${col_widths[1]}")"
    local time_str="$(__truncate_right "$time" "${col_widths[2]}")"
    local target_str="$(__truncate_right "$target" "${col_widths[3]}")"
    local msg_str="$(__truncate_right "$msg" "${col_widths[4]}")"
    local dest_str="$(__truncate_left "$dest" "${col_widths[5]}")"
    local ls_str="$(__center_text "$ls" "${col_widths[6]}")"

    printf "│ %s │ %s │ %s │ %s │ %s │ %s%s%s │\n" \
      "$id_str" \
      "$time_str" \
      "$target_str" \
      "$msg_str" \
      "$dest_str" \
      "$color" "$ls_str" "${reset_color}"
  done <<< "$data"

  print "$bot_border"
}

#### POSTPROCESSORS

# entrypoint
__begin_pp() {
  tasks=()
  export INPUT
  export TARGET
  while IFS=$'\0' read -r INPUT _method TARGET STAGE; do
    [[ -z $pp ]] && 
    method=${_method%%:*}
    [[ $method != $_method ]] && rest=${_method#$method:} || rest=

    if is_function pp_$method; then
      (($#tasks >= $ZSHDL_PP_THREADS)) && __wait_any

      dbg_msg="Invoked (Method: $method) for (Input: $INPUT)"
      dbg $dbg_msg

      {
        __read_args $STAGE

        exec {pp} > $1
        pp_$method $INPUT |
          __submit_pp "$rest"
        exec {pp}>&-
      } &
    else
      internal_err InvalidPostprocessingMethod "(Method: $method) for (Input: $INPUT)"
    fi &
    tasks+=$!
  done < $1
}

__submit_pp() {
  # Stdin: Artifacts, 1 per line
  # Args: [method]
  while IFS= read -r dest; do
    # End processing and output when there remain no more methods
    if [[ -z $1 ]]; then
      [[ -n $dest ]] && echo $dest
    else
      # Continue processing if not marked as skipped
      if [[ $dest != "# "* && -n $dest ]]; then
          [[ $dest == *$'\0'* ]] &&
          err InvalidName "Files cannot contain null characters ($dest)" ||
          echo $dest$'\0'$1$'\0'$TARGET$'\0'$((++STAGE)) >&$pp
      fi
    fi

    _log_dest "$dest" "$1"
  done
}

### BEGIN LOGIC

__wait_any() {
  while true; do
    for (( i=1; i<=$#tasks; i++ )); do;
      if ! kill -0 $tasks[i] 2>/dev/null; then
        tasks[i]=()
        return
      fi
    done
    sleep 0.1
  done
}

__output() {
  if [ -t 1 ]; then
    tee >&$cb
  else
    cat
  fi
}

__input() {
  if (($RETRY_FROM)); then
    __lg_get_since_failed $RETRY_FROM
    # todo: reprocess
    return
  fi

  {
    if (($#INPUTS)); then
      print -rl -- $INPUTS
    else
      if [ -t 0 ]; then
        echo "$(${=PASTEcmd})" # buffer
      elif $ZSHDL_ITER_ARGS; then
        print -rl -- $@
      else
        cat
      fi
    fi
  } | __lg_filter_skipped | {
    if $ZSHDL_USE_QUEUE; then
      __queue_input
    else
      cat
    fi
  }
}

ZSHDL_QUEUE_MARKER="# zsh-dl queue-marker: "

# remove the last line, and read it for the current line (progress)
__remove_queue_marker() {
  [[ -e $ZSHDL_QUEUE_FILE ]] || return 1
  last_line="$(tail -n 1 -- $ZSHDL_QUEUE_FILE)"
  last_number=${last_line##$ZSHDL_QUEUE_MARKER}
  if [[ $last_line != $last_number ]]; then
    if [[ $last_number == [0-9]## ]]; then
      ex -sc '$d|x' $ZSHDL_QUEUE_FILE # delete last line
    else
      err QueueError "Invalid queue marker encountered"
      return 1
    fi
  else
    return 1
  fi
}

__queue_input() {
  if __remove_queue_marker; then
    CURRENT_LINE=$last_number
    TRIM=$(( CURRENT_LINE - CURRENT_LINE % ZSHDL_MAX_QUEUE_SIZE ))
    if ((TRIM)); then
      tmp="$(mktemp)"
      tail -n +$(( TRIM + 1 )) $ZSHDL_QUEUE_FILE > $tmp && mv $tmp $ZSHDL_QUEUE_FILE
    fi
    CURRENT_LINE=$(( CURRENT_LINE % ZSHDL_MAX_QUEUE_SIZE ))
  else
    CURRENT_LINE=1
  fi

  {
    cat
    echo "$ZSHDL_QUEUE_MARKER$CURRENT_LINE"
  } >> $ZSHDL_QUEUE_FILE

  tail -n +$CURRENT_LINE -- $ZSHDL_QUEUE_FILE | while IFS= read -r line; do
    [[ $line != ${line#$ZSHDL_QUEUE_MARKER} ]] && break

    # skip comments
    if [[ $line == ${line#"# "} ]]; then
      echo $line
    else
      ((VERBOSE > 2)) && print $line >&2
    fi

    __remove_queue_marker || err "Missing queue file @ $ZSHDL_QUEUE_FILE"
    ((CURRENT_LINE++))
    printf "$ZSHDL_QUEUE_MARKER$CURRENT_LINE" >> $ZSHDL_QUEUE_FILE
  done
}

__mkpipe() {
  q="$(mktemp -u /tmp/$1.XXX)"
  mkfifo $q >/dev/null || fatal_err "Could not create pipe"
  echo $q
}


__lg_get_since() {
  (($#>2)) || return
  local field=$1
  local id=$2
  shift 2
  local in_clause="${(j:,:)@}"

  local query="
    SELECT $field FROM \"$ZSHDL_VARIANT\"
    WHERE id > $id AND LS IN ($in_clause);
  "

  sqlite3 "$ZSHDL_DB" "$query"
}

__lg_get_since_failed() {
  local query="
    SELECT DISTINCT target FROM \"$ZSHDL_VARIANT\"
    WHERE id > $1 AND LS > 0;
  "

  sqlite3 "$ZSHDL_DB" "$query"
}


__lg_filter_skipped() {
  if $ZSHDL_SKIP; then
    lines="$(sqlite3 "$ZSHDL_DB" "SELECT DISTINCT target FROM \"$ZSHDL_VARIANT\" WHERE LS = 0")"
    lines=(${(@f)lines})
    while IFS= read -r line; do
      if ((${lines[(ie)$line]})); then
        TARGET=$line _log_skipped
      else
        echo $line
      fi
    done
  else
    cat
  fi
}

# todo: clear logs matching input glob
__clear_logs() {
  if [[ ! -f $ZSHDL_DB ]]; then
    internal_err show_log_entries "Database not found: $ZSHDL_DB"
    return 1
  fi
  printf "This will clear all logs. Are you sure? [y/n]: "
  read -r ans
  [[ $ans == [Yy]* ]] && rm -f $ZSHDL_DB &&
  echo "Logs deleted." || return 1
}

__begin_lg() {
  if $ZSHDL_NOLOG; then cat $1 > /dev/null; return; fi
  mkdir -p $ZSHDL_STATE_DIR || fatal_err Logging "Could not initialize logging directory $ZSHDL_STATE_DIR"
  sqlite3 $ZSHDL_DB "CREATE TABLE IF NOT EXISTS \"$ZSHDL_VARIANT\" (id INTEGER PRIMARY KEY, time DATETIME DEFAULT CURRENT_TIMESTAMP, directory TEXT, target TEXT, LS INTEGER, msg TEXT, dest TEXT, input TEXT, args TEXT);"

  dbg "sqlite logging database: $ZSHDL_DB"

  # _ for nullable
  _fields=(target _msg _dest _input _args)

  while IFS=$'\0' read -r LS $_fields; do
    [[ -z $LS ]] && continue

    [[ $LS == (-|)[0-9] ]] || {
      dbg "[Logging: Invalid LS] $LS"
      continue
    }

    if [[ -n $target ]]; then
      target="'${target//\'/"''"}'"
    else
      dbg "Logging: Empty target"
      continue
    fi

    if [[ -n $_input ]]; then
      _input="'${_input//"'"/"''"}'"
    else
      _input=NULL
    fi

    if [[ -n $_msg ]]; then
      _msg="'${_msg//\'/"''"}'"
      _msg="${_msg//" \\\\\ "/$'\n'}"
    else
      _msg=NULL
    fi

    _dest=${_dest#"# "}
    if [[ -n $_dest ]]; then
      _dest="'${_dest//\'/"''"}'"
      _dest="${_dest//" \\\\\ "/$'\n'}"
      _directory="'${PWD//\'/"''"}'"
    else
      _dest=NULL
      _directory=NULL
    fi

    if [[ -n $_args ]]; then
      _args="'${_args//\'/"''"}'"
    else
      _args=NULL
    fi

    ((VERBOSE > 2)) && dbgvar target LS _directory _msg _dest _args

    sql_query="INSERT INTO \"$ZSHDL_VARIANT\" (target, LS, directory, msg, dest, input, args) VALUES ($target, $LS, $_directory, $_msg, $_dest, $_input, $_args);"

    sqlite3 "$ZSHDL_DB" $sql_query
  done < $1

  __finish_lg
}

_log_msg() {
  [[ -z $LS || -z $TARGET ]] && return 1 # only run outside of thread
  if [[ $TARGET$INPUT == *$'\n'* ]]; then
    internal_err "Logging failed: Target ($TARGET) or Input ($INPUT) contains newlines"
    return
  fi

  msg=${${1%%[[:space:]]##}//$'\n'/' \\\\\ '}
  [[ -z $msg ]] && return 1
  print -r -- $LS$'\0'$TARGET$'\0'$msg$'\0'"# "$'\0'$INPUT >&$lg
}

_log_skipped() {
  # args: dest method
  $ZSHDL_EXPLICITSKIP && [[ -z $1 ]] && return
  ((VERBOSE)) && print -u2 -- "\033[90m[Skipped]${reset_color} ${1:-${INPUT:-${TARGET}}}"

  if [[ -n $2 ]]; then
    method="-> $2"
  else
    method=
  fi

  print -r -- -2$'\0'$TARGET$'\0'$method$'\0'"${1:-"# "}"$'\0'$INPUT >&$lg # second last field cannot be empty
}

_log_dest() {
  # args: dest method (can be empty)
  # outputs: none
  if [[ -z $1 || $1 == '# '* ]]; then
    _log_skipped $@
    return
  fi

  dest=${1/#$HOME/~}

  [[ -z $INPUT ]] &&
  _args=$ARGS_ALL ||
  _args=""

  if [[ -n $2 ]]; then
    LS=-1
    method="-> $2"
    print -u2 -- "${fg[blue]}[Processed]${reset_color} $dest"
  else
    method=
    LS=0
    print -u2 -- "${fg[green]}[Complete]${reset_color} $dest"
  fi

  print -r --  $LS$'\0'$TARGET$'\0'$method$'\0'$dest$'\0'$INPUT$'\0'$_args >&$lg
}

__finish_lg() {
  :
}

### CONFIG

__assert_config_exists() {
  for f in $@; do
    [[ -e $f ]] 
  done
}

__read_config() {
  [[ ! -d $ZSHDL_CONFIG_DIR ]] && fatal_err "Configuration directory not found (ZSHDL_CONFIG_DIR @ '$ZSHDL_CONFIG_DIR'). Please check your installation."

  if [[ -z $CONFIG ]]; then
    [[ -e $ZSHDL_CONFIG_DIR/DEFAULT.ini ]] &&
    CONFIG=$ZSHDL_CONFIG_DIR/DEFAULT.ini ||
    fatal_err "No config found."
  elif (($#CONFIG > 1)); then
    fatal_err "Multiple configs $CONFIG[*] matched."
  fi

  dbg "Reading config from $CONFIG"
  offenders=$(__check_config) && ZSHDL_VARIANT=$CONFIG:r:t || {
    fatal_err InitError "Invalid config"
  }

  typeset -Ug ZSHDL_CONFIG_FILES
  ZSHDL_CONFIG_FILES=($ZSHDL_CONFIG_DIR/handlers.zsh $ZSHDL_CONFIG_DIR/postprocessors.zsh $ZSHDL_CONFIG_DIR/$ZSHDL_VARIANT_*.zsh(N))
  
  for f in $ZSHDL_CONFIG_FILES; do
    [[ -f $f ]] && source $f || warn ConfigNotFound "$f not found, skipping."
  done

  for proto in $PROTOCOLS; do
    export ${proto}_HANDLERS=""
  done

  _CONSTANTS=${(j.|.)CONSTANTS}

  while IFS='=' read -r key val || [[ -n $key ]]; do
    [[ ${key%%(\#|\;)*} == ([[:space:]]##|) ]] && continue
    [[ -z $val ]] && warn EmptyKeyFound $key && continue
    case $key in
      ${~_CONSTANTS})
        : ${(P)key::=$val}
        ;;
      http(|s).*)
        # postprocessor decoration found
        [[ $key != *(:|\|)* ]] && key+=:
        eval "val=$val"
        HTTP_HANDLERS+="$key=$val"$'\n'

        dbg "Registered $key for $val"
        ;;
      ssh.*|sftp.*)
        [[ $key != *(:|\|)* ]] && key+=:
        eval "val=$val"
        SSH_HANDLERS+="$key=$val"$'\n'

        dbg "Registered $key for $val"
        ;;
      file.*)
        [[ $key != *(:|\|)* ]] && key+=:
        eval "val=$val"
        FILE_HANDLERS+="$key=$val"$'\n'

        dbg "Registered $key for $val"
        ;;
      na.*)
        [[ $key != *(:|\|)* ]] && key+=:
        eval "val=$val"
        NA_HANDLERS+="$key=$val"$'\n'

        dbg "Registered $key for $val"
        ;;
    esac
  done < $CONFIG

  for proto in $PROTOCOLS; do
    protoh="${proto}_HANDLERS"
    : ${(P)protoh::="${(P)protoh}${proto:l}.default:=*"$'\n'}
  done

  if [[ -n $ZSHDL_QUEUE_FILE ]]; then
    qb=${ZSHDL_QUEUE_FILE%_CONFIG}
    [[ $qb != $ZSHDL_QUEUE_FILE ]] && ZSHDL_QUEUE_FILE="${qb}_${ZSHDL_VARIANT}"

    if [[ -s $ZSHDL_QUEUE_FILE ]]; then
      dbg "Queue is nonempty: $ZSHDL_QUEUE_FILE"
      # check header maybe?
    elif [[ ! -e $ZSHDL_QUEUE_FILE ]]; then
      dbg "Queue is empty: $ZSHDL_QUEUE_FILE"
    fi
  fi
}

__check_config() {
  if ! [[ $CONFIG:r:t == [a-zA-Z0-9_-]## ]]; then
    internal_err "Config name ($CONFIG:r:t) must be alphanumeric"
    return 1
  fi
  [[ -f $CONFIG ]]
  # err "InvalidConfig" "Errors found in $offenders[*]."
}

__edit_config() {
  local i file files
  i=3

  echo "Editing files for the $ZSHDL_VARIANT config:"

  echo "1) Clear logs"
  echo "2) $CONFIG"
  for file in ${ZSHDL_CONFIG_FILES[@]}; do
    echo "$i) $file"
    ((i++))
  done
  echo "-) Remove entries"
  echo "!) Delete Database"
  print -n "Enter a number to edit: "
  read -r i



  if [[ $i == 1 ]]; then
    sqlite3 $ZSHDL_DB "DROP TABLE '$ZSHDL_VARIANT';" || fatal_err "Could not drop table for $ZSHDL_VARIANT"
    exit
  elif [[ $i == 2 ]]; then
    file=$CONFIG
  elif [[ $i == "!" ]]; then
    rm $ZSHDL_DB || fatal_err "Could not delete database"
    exit
  elif [[ $i == "-" ]]; then
    printf "Enter log ids: "
    read -r line
    __parse_log_args $=line
    __delete_log_entries $LOG_ARGS
  else
    file=${ZSHDL_CONFIG_FILES[$((i-2))]}
  fi

  [[ -n $file ]] || fatal_err InvalidSelection

  ${CONFIG_EDITOR:-${VISUAL:-${EDITOR:-nano}}} $file
  __check_config
}

__display_api() {

  echo "Check $ZSHDL_CONFIG_DIR for how to define your handlers and matching rules"

  echo "\n### DEFAULT HANDLERS ###\n"

  api=(http.default ssh.default file.default)
  for f in $api; do
    functions $f
  done

  echo "\n### API ###\n"

  api=(read_dest failure_or_show success_or_log log_stderr)
  for f in $api; do
    functions $f
  done

  if ((VERBOSE > 2)); then
    api=(infovar infovar warn err dbg vardbg fatal_err have get_file_type get_html_field get_real)
    for f in $api; do
      functions $f
    done

    echo "\n### Additional ###\n"
    overrides=(__read_proto_stem __read_url_params __read_target_type_mime_encoding __read_userhost_subpath __read_target)
    for f in $api; do
      functions $f
    done

  fi

  echo "\n### CONSTANTS ###\n"

  for c in $CONSTANTS; do
    print -- "$c: ${(P)c}"
  done

  echo "\n### USAGE ###\n"
}

### CONSTANTS

PROTOCOLS=(HTTP SSH FILE NA)

have() {
  (( $+commands[${1%% *}] ))
}

# Bootstrapping function to conveniently enable or gracefully fail features
exportCmdVar() {
  local var_name=$1
  shift
  for param; do
    if have $param; then
      typeset -gx "$var_name=$param"
      return 0
    fi
  done
  typeset -gx "$var_name=false"
  return 1
}

exportCmdVar "CLIPcmd" \
  "xclip -sel clip" \
  "pbcopy"

exportCmdVar "PASTEcmd" \
  "xclip -o" \
  "pbpaste"

exportCmdVar "FORMATPYTHONcmd" \
  "ruff"

exportCmdVar "HTML2MARKDOWNcmd" \
  "html2markdown"

exportCmdVar "YTDLPcmd" \
  "yt-dlp"

exportCmdVar "IMAGESDLcmd" \
  "gallery-dl -D ."

if ! have lt; then
  lt() {
    local file=${@[$#]}
    while  [[ -z $file || -e $file ]]; do
      print -n -u2 "$file exists! Please choose a different name: "
      read -r file </dev/tty || return 1
    done
    
    case $1 in
      -d)    echo $file;;
      -m)    shift 1; mv $@;;
      -c)    shift 1; cp -r $@;;
    esac
  }
fi

unset -f exportCmdVar

CONSTANTS=(ZSHDL_CONNECT_TIMEOUT ZSHDL_THREADS ZSHDL_PP_THREADS VERBOSE ZSHDL_FORCE_PROTO ZSHDL_OUTPUT_DIR ZSHDL_LOG_DISPLAY_LIMIT ZSHDL_STATE_DIR ZSHDL_CONFIG_DIR ZSHDL_SKIP ZSHDL_NOLOG ZSHDL_EXPLICITSKIP ZSHDL_STRIPWHITESPACE ZSHDL_QUEUE_FILE)

: ${ZSHDL_CONNECT_TIMEOUT:=5}
: ${ZSHDL_THREADS:=1}
: ${ZSHDL_PP_THREADS:=5}
[[ $VERBOSE == [0-9] ]] || VERBOSE=1

# Skips targets recorded as having executed to success in the log
[[ $ZSHDL_SKIP == (true|false) ]] || ZSHDL_SKIP=false

# Only log skips incurred by methods (Unprocessed inputs are not logged)
[[ $ZSHDL_EXPLICITSKIP == (true|false) ]] || ZSHDL_EXPLICITSKIP=true
[[ $ZSHDL_NOLOG == (true|false) ]] || ZSHDL_NOLOG=false
[[ $ZSHDL_STRIPWHITESPACE == (true|false) ]] || ZSHDL_STRIPWHITESPACE=false
: ${ZSHDL_FORCE_PROTO}
: ${ZSHDL_OUTPUT_DIR:=./}
: ${ZSHDL_LOG_DISPLAY_LIMIT:=50}
: ${ZSHDL_MAX_QUEUE_SIZE:=500}
[[ $ZSHDL_ITER_ARGS == (true|false) ]] || ZSHDL_ITER_ARGS=false

: ${ZSHDL_STATE_DIR:=$HOME/.local/state/zsh-dl}
ZSHDL_DB=$ZSHDL_STATE_DIR/log.db
: ${ZSHDL_CONFIG_DIR:=$HOME/.config/zsh-dl}
: ${ZSHDL_QUEUE_FILE:=$ZSHDL_STATE_DIR/queue_CONFIG}
[[ $ZSHDL_USE_QUEUE == (true|false) ]] || ZSHDL_USE_QUEUE=false
### ARGPARSE

usage() {
  ((VERBOSE>1)) && __display_api

  cat <<EOF
Usage: $PROG [config] [-hlesvq] [-r count] [- input] […log_ids]

Extensible cli download tool.

Subcommands:
  config            : Use <config|DEFAULT>.ini in $ZSHDL_CONFIG_DIR as the config.
                        A unique prefix can be specified.
Options:
  - <input>        : Process <input> instead of reading from stdin/clipboard.
                        Can be specified multiple times.
  -e                : Edit configuration files.
  -h                : Display this help message and exit.
  -l […log_ids]     : Show the log for the given log_ids.
                        'n:' to display the last n logs
                        '.s' to filter by status
  --from [log_id=0] : Retry failed downloads.
  -s                : Skip inputs which succeded in the past.
  -v                : Set verbosity 2.
  --queue [file]    : Append input to and read from the queue file.
  -q                : Use the default queue file
  --verbose [level] : Set verbosity level.
  --clear [glob]    : Clear logs.
  …method_args      : Passed to the ARGS array of methods.
                        ':' applies the arguments to the next stage's method.

Environment variables and configuration:
  See $PROG -v -h

Examples:
  $PROG
    Parses clipboard for urls to download
  $PROG - "https://gutenberg.org/ebooks/76257"
    Download book #76257 as a markdown file
  $PROG - "https://github.com/sumoduduk/terminusdm/tree/main/src"
    Download the src/ folder of the sumoduduk/terminusdm in the main branch to the current directory
  $PROG - "user@host:path/to/your/file.tx"
    Downloads over SSH
  $PROG -ci - "google.com"
    Gets info about a URL/file
  $PROG -cf - "path/to/your/script.zsh" - "random_weather.py"
    Format local files using the fmt.ini config
  $PROG -ca --queue urls.txt
    Download audio from a list of youtube urls (with alternate.ini)
  $PROG -q < urls.txt
    Add URLs to and start the default queue.

Status codes:

   …: Misc/Processing
  -2: Unhandled/Skipped
  -1: Partial Success
   0: Success
  >0: Handling error
EOF
  
  (($#)) && exit $1
}

SHOWHELP=false
CLEAR_LOGS=false
RETRY_FROM=0
RETRY=1
SCRIPT="$(readlink -f -- "$0")"
PROG="$(basename "$0")"
ZSHDL_VARIANT=DEFAULT

TARGET=
INPUT=
MODE=
LOG_FILTER=

new_args=()
_posargs=false

if [[ -n $1 && $1 != -* && $1 != : ]]; then
  CONFIG=($ZSHDL_CONFIG_DIR/$1*.ini)
  shift 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
      SHOWHELP=true
      ;;
    --from)
      if ! $_posargs; then
        if [[ "$2" =~ ^[0-9]+$ ]]; then
          RETRY_FROM=$2
          shift
        else
          RETRY_FROM=1
        fi
        shift
        continue
      fi
      ;|
    --clear)
      CLEAR_LOGS=true
      ;;
    --queue)
      if ! $_posargs; then
        if [[ $2 != -* ]]; then
          ZSHDL_QUEUE_FILE=$2
          shift
        fi  
        ZSHDL_USE_QUEUE=true
        have ex || fatal_err "ex is required for -q"
        continue
      fi
      ;|
    --verbose)
      if ! $_posargs; then
        if [[ "$2" =~ ^[0-9]$ ]]; then
          VERBOSE=$2
          shift
        else
          VERBOSE=2
        fi
        shift
        continue
      fi
      ;|
    -)
      if (($# > 1)) {
        INPUTS+=($2)
        shift
      } else {
        usage 1
      }
      ;;
    --|:)
      _posargs=true
      ;|
    *)
      new_args+=("$1")
      ;;
  esac
  shift
done
set -- "${new_args[@]}"


INPUTS=()
while getopts "hlevr:sqx:-" opt; do
    case "$opt" in
        e)
            MODE=EDIT
            ;;  
        s)
            ZSHDL_SKIP=true
            ;;
        q)
            ZSHDL_USE_QUEUE=true
            have ex || fatal_err "ex is required for -q"
            ;;
        v)
            VERBOSE=2
            ;;
        h)
            SHOWHELP=true
            ;;
        l)
            MODE=LOGS
            ;;
        -|:|'')
            break
            ;;
        *)
            usage 1
            ;;
    esac
done

shift $((OPTIND - 1))

$SHOWHELP && usage 0

### BEGIN
__read_config $CONFIG

$CLEAR_LOGS && __clear_logs $@

$ZSHDL_ITER_ARGS || export ARGS_ALL="${(j. .)${(@qq)@}}"


case $MODE in
  LOGS)
    __parse_log_args $@
    if (($#LOG_ARGS)); then
      __show_log_entries $LOG_ARGS
    else
      __show_log
    fi
    exit
    ;;
  EDIT)
    __edit_config $CONFIG
    exit
    ;;
esac

# Begin
LG="$(__mkpipe dl_lg)"
__begin_lg $LG &
LG_ID=$!
exec {lg}> $LG

if [ -t 1 ]; then
  CB="$(__mkpipe dl_cb)"
  ${=CLIPcmd} < $CB &
  CB_ID=$!
  exec {cb}> $CB
fi


PP="$(__mkpipe dl_pp)"
{ __begin_pp $PP | __output; } &
PP_ID=$!
exec {pp}> $PP

trap "rm $PP $LG" EXIT 

tasks=()


__input $@ | {
$ZSHDL_STRIPWHITESPACE && IFS=
  while read -r line; do
    (( $#tasks >= $ZSHDL_THREADS )) && __wait_any
    { handle $line </dev/tty | __output; } &
    tasks+=$!
  done
}

exec {pp}>&-
exec {lg}>&-
[ -t 1 ] && exec {cb}>&-

wait $PP_ID
# wait $LG_ID